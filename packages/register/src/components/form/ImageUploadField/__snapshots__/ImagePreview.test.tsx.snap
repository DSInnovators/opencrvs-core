// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`image upload component renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ImagePreview
    goBack={[MockFunction]}
    previewImage={
      Object {
        "data": "dummy base64 data",
        "optionValues": Array [],
        "type": "image/png",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <ActionPage
        backLabel={undefined}
        goBack={[MockFunction]}
        title="Preview"
      >
        <styled.div>
          <styled.img
            id="preview_image_field"
            src="dummy base64 data"
          />
        </styled.div>
      </ActionPage>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "backLabel": undefined,
        "children": <styled.div>
          <styled.img
            id="preview_image_field"
            src="dummy base64 data"
          />
        </styled.div>,
        "goBack": [MockFunction],
        "title": "Preview",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <styled.img
            id="preview_image_field"
            src="dummy base64 data"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "preview_image_field",
            "src": "dummy base64 data",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <ActionPage
          backLabel={undefined}
          goBack={[MockFunction]}
          title="Preview"
        >
          <styled.div>
            <styled.img
              id="preview_image_field"
              src="dummy base64 data"
            />
          </styled.div>
        </ActionPage>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "backLabel": undefined,
          "children": <styled.div>
            <styled.img
              id="preview_image_field"
              src="dummy base64 data"
            />
          </styled.div>,
          "goBack": [MockFunction],
          "title": "Preview",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <styled.img
              id="preview_image_field"
              src="dummy base64 data"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "preview_image_field",
              "src": "dummy base64 data",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
