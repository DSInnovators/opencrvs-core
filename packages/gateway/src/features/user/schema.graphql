input UserIdentifierInput {
  use: String # -> .use
  system: String # -> .system
  value: String # -> .system
}

type UserIdentifier { # -> identifier
  use: String # -> .use
  system: String # -> .system
  value: String # -> .system
}

input UserInput {
  name: [HumanNameInput]
  identifier: [UserIdentifierInput]
  username: String
  mobile: String
  role: String
  type: String
  email: String
  primaryOffice: String
  catchmentArea: [String]
  device: String
  signature: String
}

type User {
  id: ID
  userMgntUserID: ID
  practitionerId: String
  name: [HumanName] # -> .name
  username: String
  mobile: String
  role: String
  type: String
  email: String
  status: String
  primaryOffice: Location
  catchmentArea: [Location]
}

type SearchUserResult {
  results: [User]
  totalItems: Int
}

input SecurityQuestionAnswer {
  questionKey: String
  answer: String
}

type Query {
  getUser(userId: String): User
  searchUsers(
    username: String
    mobile: String
    status: String
    role: String
    primaryOfficeId: String
    locationId: String
    count: Int
    skip: Int
    sort: String
  ): SearchUserResult
}

type Mutation {
  createUser(user: UserInput!): User!
  activateUser(
    userId: String!
    password: String!
    securityQNAs: [SecurityQuestionAnswer]!
  ): String
}
