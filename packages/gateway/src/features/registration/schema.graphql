enum RegStatus {
  DECLARED
  VERIFIED
  REGISTERED
  CERTIFIED
}

enum BirthRegType {
  SELF
  STATELESS
  REFUGEE
  INFORMANT_ONLY
  SINGLE_PARENT
  TEST
  OTHER
}

enum BirthType {
  SINGLE
  TWIN
  TRIPLET
  QUADRUPLET
  HIGHER_MULTIPLE_DELIVERY
}

enum AttendantType {
  PHYSICIAN
  NURSE
  NURSE_MIDWIFE
  MIDWIFE
  OTHER_PARAMEDICAL_PERSONNEL
  LAYPERSON
  NONE
  OTHER
}

enum AttachmentType {
  PASSPORT
  NATIONAL_ID
  IMMUNISATION_CERTIFICATE
  PAPER_FORM
  PASSPORT_PHOTO
  OTHER
}

enum RegistrationType {
  BIRTH
  DEATH
}

enum CauseOfDeath {
  NATURAL
  ACCIDENT
  OTHER
}

input CommentInput {
  id: ID!
  user: UserInput
  comment: String
  createdAt: Date
}

type Comment {
  id: ID!
  user: User
  comment: String
  createdAt: Date
}

input RegWorkflowInput {
  type: RegStatus
  user: UserInput
  timestamp: Date
  comments: [CommentInput]
  location: LocationInput
}

type RegWorkflow {
  id: ID!
  type: RegStatus
  user: User
  timestamp: Date
  comments: [Comment]
  location: Location
}

input CertificateInput {
  paperId: ID!
  reciever: PersonInput
  location: LocationInput
  User: UserInput
  createdAt: Date
}

type Certificate {
  id: ID!
  paperId: ID!
  reciever: Person
  location: Location
  User: User
  createdAt: Date
}

input BirthRegistrationInput {
  registration: RegistrationInput
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: PersonInput
  birthLocation: LocationInput
  birthType: BirthType
  attendantAtBirth: AttendantType
  birthRegistrationType: BirthRegType
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  birthOrder: Int # For order of birth 3 equals 3rd born - remember to also save to Person multipleBirth field
  createdAt: Date
  updatedAt: Date
}

type BirthRegistration {
  id: ID! # long uuid
  registration: Registration
  child: Person
  mother: Person
  father: Person
  informant: Person
  birthLocation: Location
  birthType: BirthType
  attendantAtBirth: AttendantType
  birthRegistrationType: BirthRegType
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  birthOrder: Int # For order of birth 3 equals 3rd born - remember to also save to Person multipleBirth field
  createdAt: Date
  updatedAt: Date
}

input DeathRegistrationInput {
  registration: RegistrationInput
  deceased: PersonInput # Remember to mark person as deceased
  mother: PersonInput
  father: PersonInput
  informant: PersonInput
  spouse: [PersonInput] # need to track multiple spouses for muslim countries
  deathLocation: LocationInput
  causeOfDeath: CauseOfDeath
  createdAt: Date
  updatedAt: Date
}

type DeathRegistration {
  id: ID! # long uuid
  registration: Registration
  deceased: Person # Remember to mark person as deceased
  mother: Person
  father: Person
  informant: Person
  spouse: [Person]
  deathLocation: Location
  causeOfDeath: CauseOfDeath
  createdAt: Date
  updatedAt: Date
}

input RegistrationInput {
  trackingID: String # short uuid easy to remember
  registrationNumber: String # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  paperFormID: String
  page: String
  book: String
  status: [RegWorkflowInput]
  type: RegistrationType
  attachments: [AttachmentInput]
  location: LocationInput
}

type Registration {
  id: ID! # long uuid
  trackingID: String # short uuid easy to remember
  registrationNumber: String # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  paperFormID: String
  page: String
  book: String
  status: [RegWorkflow]
  type: RegistrationType
  attachments: [Attachment]
  location: Location
}

input AttachmentInput {
  data: String # base64
  status: String # approved/validated deleted
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  # rest of the stuff
  createdAt: Date
}

type Attachment {
  id: ID! # uuid
  data: String # base64
  status: String # approved/validated deleted
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  createdAt: Date
}

type Query {
  listBirthRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
  ): [BirthRegistration]
  listDeathRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
  ): [BirthRegistration]
}

type Mutation {
  # BIRTH
  createBirthRegistration(details: BirthRegistrationInput!): ID!
  updateBirthRegistration(
    id: ID!
    details: BirthRegistrationInput!
  ): BirthRegistration!
  # process transitions
  markBirthAsVerified(id: ID!, location: LocationInput): BirthRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration
  markBirthAsRegistered(id: ID!, location: LocationInput): BirthRegistration # updates status to 'registered' - registration clerk has accepted the declaration, it is now official
  markBirthAsCertified(id: ID!, location: LocationInput): BirthRegistration # updates status to 'certified' - a printed certificate has been produced
  markBirthAsVoided(
    id: ID!
    reason: String!
    location: LocationInput
  ): BirthRegistration # updated status to 'voided' - the registration was captured in error
  # DEATH
  createDeathRegistration(details: DeathRegistrationInput!): ID!
  updateDeathRegistration(
    id: ID!
    details: DeathRegistrationInput!
  ): DeathRegistration!
  # process transitions
  markDeathAsVerified(id: ID!, location: LocationInput): DeathRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration
  markDeathAsRegistered(id: ID!, location: LocationInput): DeathRegistration # updates status to 'registered' - registration clerk has accepted the declaration, it is now official
  markDeathAsCertified(id: ID!, location: LocationInput): DeathRegistration # updates status to 'certified' - a printed certificate has been produced
  markDeathAsVoided(
    id: ID!
    reason: String!
    location: LocationInput
  ): DeathRegistration # updated status to 'voided' - the registration was captured in error
}
