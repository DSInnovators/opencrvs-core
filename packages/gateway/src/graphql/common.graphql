# automatically map from FHIR

scalar Date

input HumanNameInput {
  use: String # traditional (Bangla) or English
  givenName: String
  familyName: String
}

type HumanName {
  use: String # traditional (Bangla) or English
  givenName: String
  familyName: String
}

enum Relationship {
  GUARDIAN
  MATERNAL_GRANDMOTHER
  MATERNAL_GRANDFATHER
  PATERNAL_GRANDMOTHER
  PATERNAL_GRANDFATHER
  OTHER
}

enum LocationType {
  HOSPITAL
  OTHER_INSTITUTION
  PRIVATE_HOME
  OTHER
}

enum IdentityIDType {
  PASSPORT
  NATIONAL_ID
  DRIVING_LICENCE
  BIRTH_REGISTRATION_NUMBER
  DEATH_REGISTRATION_NUMBER
}

enum EducationType {
  NO_SCHOOLING
  PRIMARY_ISCED_1
  LOWER_SECONDARY_ISCED_2
  UPPER_SECONDARY_ISCED_3
  POST_SECONDARY_ISCED_4
  FIRST_STAGE_TERTIARY_ISCED_5
  SECOND_STAGE_TERTIARY_ISCED_6
  NOT_STATED
}

enum MigrantType {
  FOREIGN_RESIDENT
  STUDENT
  ASYLUM_SEEKER
  RESIDENT
  VISITOR
  TRANSIENT
  REFUGEE
  OTHER
}

input IdentityInput {
  id: ID
  type: IdentityIDType
}

type IdentityType {
  id: ID
  type: IdentityIDType
}

input PersonInput {
  identifier: [IdentityInput]
  name: [HumanNameInput]
  telecom: [ContactPointInput]
  gender: String
  weightAtBirth: String # Should this be Observation > Category > vital-signs > weight?
  birthDate: String
  maritalStatus: String # Use https://www.hl7.org/fhir/valueset-marital-status.html
  dateOfMarriage: Date
  multipleBirth: Int # For order of birth 3 equals 3rd born
  address: [AddressInput]
  photo: AttachmentInput
  deceased: Boolean
  nationality: String # use https://www.hl7.org/fhir/extension-patient-nationality.html
  educationalAttainment: EducationType
  migrantStatus: MigrantType
}

type Person {
  id: ID
  identifier: [IdentityType]
  name: [HumanName]
  telecom: [ContactPoint]
  gender: String
  weightAtBirth: String # Should this be Observation > Category > vital-signs > weight?
  birthDate: String
  maritalStatus: String # Use https://www.hl7.org/fhir/valueset-marital-status.html
  dateOfMarriage: Date
  multipleBirth: Int # For order of birth 3 equals 3rd born
  address: [Address]
  photo: Attachment
  deceased: Boolean
  nationality: String # use https://www.hl7.org/fhir/extension-patient-nationality.html
  educationalAttainment: EducationType
  migrantStatus: MigrantType
}

input RelatedPersonInput {
  identifier: [IdentityInput]
  name: [HumanNameInput]
  relationship: Relationship
  telecom: [ContactPointInput]
  gender: String
  birthDate: String
  address: [AddressInput]
  photo: AttachmentInput
  nationality: String # use https://www.hl7.org/fhir/extension-patient-nationality.html
}

type RelatedPerson {
  id: ID
  identifier: [IdentityType]
  name: [HumanName]
  relationship: Relationship
  telecom: [ContactPoint]
  gender: String
  birthDate: String
  address: [Address]
  photo: Attachment
  nationality: String # use https://www.hl7.org/fhir/extension-patient-nationality.html
}

input ContactPointInput {
  system: String # phone | fax | email | pager | url | sms | other
  value: String # The actual contact point details
  use: String # home | work | temp | old | mobile - purpose of this contact point
}

type ContactPoint {
  system: String # phone | fax | email | pager | url | sms | other
  value: String # The actual contact point details
  use: String # home | work | temp | old | mobile - purpose of this contact point
}

input LocationInput {
  identifier: [ID]
  status: String
  name: String
  alias: [String]
  description: String
  type: LocationType
  telecom: [ContactPointInput]
  address: AddressInput
  longitude: Float
  latitude: Float
  altitude: Float
}

type Location {
  id: ID!
  identifier: [ID]
  status: String
  name: String
  alias: [String]
  description: String
  type: LocationType
  telecom: [ContactPoint]
  address: Address
  longitude: Float
  latitude: Float
  altitude: Float
}

input AddressInput {
  use: String
  type: String
  text: String
  line: [String]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

type Address {
  use: String
  type: String
  text: String
  line: [String]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

# TODO: Move to user feature when built out - manage through a user management microservice
input UserInput {
  userName: String
  created: Date
  lastLoggedIn: Date
  firstName: String
  lastName: String
  email: String
  telecom: [ContactPointInput]
  identifier: [IdentityInput]
  role: [UserRoleInput]!
  address: AddressInput
  primaryOffice: LocationInput
  currentLocation: LocationInput
  catchmentArea: [LocationInput]
}

type User {
  id: ID!
  userName: String
  created: Date
  lastLoggedIn: Date
  firstName: String
  lastName: String
  email: String
  telecom: [ContactPoint]
  identifier: [IdentityType]
  role: [UserRole]!
  address: Address
  primaryOffice: Location
  currentLocation: Location
  catchmentArea: [Location]
}

input UserRoleInput {
  type: String #declaration-clerk, registrar, certification-clerk, manager, admin
}

type UserRole {
  id: ID!
  type: String #declaration-clerk, registrar, certification-clerk, manager, admin
}

type Query {
  user(id: ID!): User
}
